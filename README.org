#+title: Complete intro to SQLite using Node
#+date: [2025-02-14 Fri]
#+startup: indent
#+property: header-args :results output

* üè∑Ô∏è Complete-Intro-to-SQLite
Front End Masters [[https://frontendmasters.com/courses/sqlite/][course]] by Brian Holt.

* Node app
Since the last version of *Node*, as of today, support TS, I'll just let the IDE
handle the types and run without transpiling.
In the root of the folder:
#+begin_src bash
  nvm install 23
  npm init -y
#+end_src

Some basic settings to begin with:
- Main entry point is =index.ts=. I write directly in typescript and let *Node*
  do the stripping. I will probably have to use only a subset of the TS features
  available.
- Tests will run with the built in test runner ~node --test~.
  *Node* will run against any file that ends with =.test.ts=


Because Typescript doesn't understand *Node* types, I need to also install them.
#+name: install node types
#+begin_src bash
  npm i -D @types/node
#+end_src
* üîë Env
It's all done locally, so no need of handling API Keys of any sort.
* Sqlite command sample
we assume you have the database opened ~sqlite3 ./Chinook_Sqlite.sqlite~.
** Basic builtin commands
- .help :: show the builtin commands available
- .show :: Show the current values for various settings
- .excel :: Display the output of next command in spreadsheet[fn:1]
- .fullschema :: Show schema and the content of sqlite_stat tables
- .schema <pattern> :: Show the CREATE statements matching <pattern>
- .tables <pattern> :: List names of tables matching LIKE pattern TABLE
** SQL commands
#+name: select
#+begin_src sql
  select * from Artist
  select name from artist where artistid = 174;
  select * from artist where name like '%Postal%'; -- double quotes for column name
#+end_src

* Footnotes

[fn:1]Depending on your OS, might open Table on Mac, Excel on W$
